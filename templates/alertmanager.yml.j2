#
# {{ ansible_managed }}
#
# Sample configuration.
# See https://prometheus.io/docs/alerting/configuration/ for documentation.

global:
  # The smarthost and SMTP sender used for mail notifications.
  smtp_smarthost: "{{ prometheus_alertmanager_global['smtp_smarthost'] }}"
  smtp_from: "{{ prometheus_alertmanager_global['smtp_from'] }}"
  smtp_require_tls: {{ prometheus_alertmanager_global['smtp_require_tls'] }}
{% if prometheus_alertmanager_global['smtp_auth_username'] is defined %}
  smtp_auth_username: "{{ prometheus_alertmanager_global['smtp_auth_username'] }}"
{% endif %}
{% if prometheus_alertmanager_global['smtp_auth_password'] is defined %}
  smtp_auth_password: "{{ prometheus_alertmanager_global['smtp_auth_password'] }}"
{% endif %}
{% if prometheus_alertmanager_global['smtp_hello'] is defined %}
  smtp_hello: "{{ prometheus_alertmanager_global['smtp_hello'] }}"
{% endif %}
{% if prometheus_alertmanager_global['smtp_auth_password_file'] is defined %}
  smtp_auth_password_file: "{{ prometheus_alertmanager_global['smtp_auth_password_file'] }}"
{% endif %}
{% if prometheus_alertmanager_global['smtp_auth_identity'] is defined %}
  smtp_auth_identity: "{{ prometheus_alertmanager_global['smtp_auth_identity'] }}"
{% endif %}

# The root route on which each incoming alert enters.
route:
  # The root route must not have any matchers as it is the entry point for
  # all alerts. It needs to have a receiver configured so alerts that do not
  # match any of the sub-routes are sent to someone.
  receiver: "{{ prometheus_alertmanager_route['receiver'] }}"

  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  #
  # To aggregate by all possible labels use '...' as the sole label name.
  # This effectively disables aggregation entirely, passing through all
  # alerts as-is. This is unlikely to be what you want, unless you have
  # a very low alert volume or your upstream notification system performs
  # its own grouping. Example: group_by: [...]
  group_by: ["{{ prometheus_alertmanager_route['group_by'] | join('", "') }}"]

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: {{ prometheus_alertmanager_route['group_wait'] }}

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: {{ prometheus_alertmanager_route['group_interval'] }}

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: {{ prometheus_alertmanager_route['repeat_interval'] }}

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.

{% if prometheus_alertmanager_route['routes'] is defined %}
  # The child route trees.
  routes:
{% for child_route in prometheus_alertmanager_route['routes'] %}
    - {{ child_route['type'] }}:
        {{ child_route['match_key'] }}: {{ child_route['match_value'] }}
{% if child_route['receiver'] is defined %}
      receiver: {{ child_route['receiver'] }}
{% endif %}
{% if child_route['group_by'] is defined %}
      group_by: [{{ child_route['group_by'] | join(', ')}}]
{% endif %}
{% if child_route['sub_routes'] is defined %}

      routes:
{% for subroute in child_route['sub_routes'] %}
        - {{ subroute['type'] }}:
            {{ subroute['match_key'] }}: {{ subroute['match_value'] }}
          receiver: {{ subroute['receiver'] }}
{% endfor %}
{% endif %}

{% endfor %}
{% endif %}
{% if prometheus_alertmanager_inhibit_rules is defined %}
# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
# We use this to mute any warning-level notifications if the same alert is
# already critical.
inhibit_rules:
{% for rule in prometheus_alertmanager_inhibit_rules %}
  - source_match:
      severity: "{{ rule['source_match'] }}"
    target_match:
      severity: "{{ rule['target_match'] }}"
    # Apply inhibition if the alertname is the same.
    # CAUTION:
    #   If all label names listed in `equal` are missing
    #   from both the source and target alerts,
    #   the inhibition rule will apply!
    equal: ["{{ rule['equal'] | join('", "') }}"]
{% endfor %}
{% endif %}

receivers:
{% for receiver in prometheus_alertmanager_receivers %}
  - name: "{{ receiver['name'] }}"
{% if receiver['email_configs'] is defined %}
    email_configs:
{% for emailconfig in receiver['email_configs'] %}
      - {{ emailconfig['type'] }}: "{{ emailconfig['entries'] | join(', ') }}"
{% endfor %}
{% endif %}
{% if receiver['pagerduty_configs'] is defined %}
    pagerduty_configs:
{% for pagerdutyconfig in receiver['pagerduty_configs'] %}
      - {{ pagerdutyconfig['type'] }}: {{ pagerdutyconfig['entries'] | join(',') }}
{% endfor %}
{% endif %}
{% if loop.index != prometheus_alertmanager_receivers | length %}

{% endif %}
{% endfor %}
